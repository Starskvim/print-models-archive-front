{"ast":null,"code":"import parse from 'csv-parse/lib/sync';\nimport http from './http';\nimport { dataUrl } from '../config.json';\nexport async function getProducts() {\n  const input = await http.get(dataUrl);\n  const products = parse(input, {\n    columns: true,\n    skip_empty_lines: true\n  });\n  return sanitizeGenders(products);\n}\nexport function sanitizeGenders(products) {\n  for (const product of products) {\n    if (product.gender !== 'male' && product.gender !== 'female' && product.gender !== 'unisex') {\n      product.gender = null;\n    }\n  }\n  return products;\n}","map":{"version":3,"names":["parse","http","dataUrl","getProducts","input","get","products","columns","skip_empty_lines","sanitizeGenders","product","gender"],"sources":["C:/Users/Starskvim/WebstormProjects/product-list/src/services/product.ts"],"sourcesContent":["import parse from 'csv-parse/lib/sync';\r\n\r\nimport http from './http';\r\n\r\nimport { dataUrl } from '../config.json';\r\nimport { Product } from '../types/product';\r\n\r\nexport async function getProducts(): Promise<Product[]> {\r\n  const input = await http.get(dataUrl) as string;\r\n  const products: Product[] = parse(input, {\r\n    columns: true,\r\n    skip_empty_lines: true\r\n  });\r\n  return sanitizeGenders(products);\r\n}\r\n\r\nexport function sanitizeGenders(products: Product[]): Product[] {\r\n  for (const product of products) {\r\n    if (product.gender !== 'male' && product.gender !== 'female' && product.gender !== 'unisex') {\r\n      product.gender = null;\r\n    }\r\n  }\r\n  return products;\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,oBAAoB;AAEtC,OAAOC,IAAI,MAAM,QAAQ;AAEzB,SAASC,OAAO,QAAQ,gBAAgB;AAGxC,OAAO,eAAeC,WAAWA,CAAA,EAAuB;EACtD,MAAMC,KAAK,GAAG,MAAMH,IAAI,CAACI,GAAG,CAACH,OAAO,CAAW;EAC/C,MAAMI,QAAmB,GAAGN,KAAK,CAACI,KAAK,EAAE;IACvCG,OAAO,EAAE,IAAI;IACbC,gBAAgB,EAAE;EACpB,CAAC,CAAC;EACF,OAAOC,eAAe,CAACH,QAAQ,CAAC;AAClC;AAEA,OAAO,SAASG,eAAeA,CAACH,QAAmB,EAAa;EAC9D,KAAK,MAAMI,OAAO,IAAIJ,QAAQ,EAAE;IAC9B,IAAII,OAAO,CAACC,MAAM,KAAK,MAAM,IAAID,OAAO,CAACC,MAAM,KAAK,QAAQ,IAAID,OAAO,CAACC,MAAM,KAAK,QAAQ,EAAE;MAC3FD,OAAO,CAACC,MAAM,GAAG,IAAI;IACvB;EACF;EACA,OAAOL,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}